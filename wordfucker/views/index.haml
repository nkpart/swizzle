!!!
%html
  %head
    %script{:src => "jquery-1.4.2.min.js"}
    %script{:src => "webtoolkit.md5.js"}
    %script{:src => "jquery-ui-1.8.13.custom.min.js"}

  %body
    %h1#title

    #holes

    #score
    #info

    %form#guess{:action => "#", :method => "get"}
      %input#guess_text

    #fails

    #party-time{:style => "display: none"}
      HAVE A PARTY BECAUSE YOU WON!
      %button
        Next Puzzle
      %p#no-puzzles{:style => "display: none"}
        Oh, we ran out of puzzles.

    #log

:css
  body {
    font-family: 'Helvetica Neue', Arial, sans-serif;
    margin: 0 auto;
    width: 400px;
  }

  h1#title {
    font-size: 6em;
    margin: 0.2em 0;
  }

  #party-time {
    font-size: 120%;
    font-weight: bold;
    text-align: center;
    margin: 1em;
  }

  #party-time button {
    margin: 1em;
  }

  #fails {
    text-align: center;
    font-size: small;
    word-wrap: break-word;
  }

  #score {
    text-align: right;
    margin: 0em 0;
  }

  #info {
    text-align: right;
    font-size: small;
    margin: 0.5em 0;
  }

  #holes {
    font-family: monospace;
    overflow: hidden;
  }

  #holes ul {
    float: left;
    list-style: none;
    margin: 1em 1em 0.5em; 
    padding: 0em 0em;
  }

  #holes ul li {
    width: 3em;
    font-family: monospace;
  }

  input#guess_text {
    font-family: 'Helvetica Neue', Arial, sans-serif;
    font-size: 160%;    
    font-weight: bold;
    width: 100%;
  }

  .pressed {
    color: #ddd;
  }

  .hidden-word {
    color: #999
  } 

:javascript
  var GameState = {
    setPuzzle: function(puzzle) {
      this.puzzleId = puzzle[0]
      this.letters = puzzle[1];
      this.children = puzzle[2];
      this.shas = $.map(this.children, function(val, i) { return val[1]; }); 
      this.found = [];
    },
    score: function () {
      return this.found.length + '/' + this.children.length;
    },
    isDone: function() { return this.found.length == this.children.length; },
    // Returns true if the guess was new
    recordGuess: function(g, sha) {
      var thing = [g.length, sha];
      console.debug(this.shas.indexOf(sha));
      if (this.shas.indexOf(sha) >= 0) {
        if (this.found.indexOf(g) >= 0) {
          return false;
        } else {
          this.found.push(g);
          return true;
        }
      }
      return false;
    }
  };

  var View = {
    winner: function () {
      $('#party-time').css('display', 'block');
      $('#guess_text').attr('disabled', true);
      if (true) {
        $('#party-time button').focus();
      } else {
        $('#no-puzzles').css('display', 'block');
        $('#party-time button').hide();
      }
    },
    updateScore: function (s) {
      $('#score').html(s);
    },
    resetInput: function() {
      $('.letter').removeClass('pressed');
      $('.letter').addClass('not-pressed');
      $('#guess_text').val('');
    },
    displayPuzzle: function(pid, word, children) {
      $('#fails').html('');
      $('#party-time').css('display', 'none');
      $('#guess_text').attr('disabled', false);
      var show = $.map(word, function(v, i) { 
        return '<span class="not-pressed letter value-' + v + '">' + v + '</span>';
      }).join('');
      $('#title').html(show);
      $('#holes').html('');
      $('#info').html('#' + pid);
      var words = children.slice(0);
      while (words.length > 0) {
        var chunk = words.splice(0, 5);
        var middle = $.map(chunk, function(val, i) {
          var sha = val[1];
          return ('<li class=hidden-word id=word-' + sha + '>' + hidden(val[0]) + '</li>');
        }).join('\n');
        $('#holes').append('<ul>' + middle + '</ul>');
      }
      $('#guess_text').focus();
    },
    incrementFails: function() {
      $('#fails').append('.');
    },
  };

  function checkGuess(guess) {
    var g = guess.toLowerCase();
    var sha = MD5(g); 
    var word_bit = $('#word-' + sha);
    if (word_bit.length) {
      // TODO: lot of view shiz here
      word_bit.text(guess); // Attempt to update the text anyway.
      word_bit.removeClass('hidden-word');
      var recorded = GameState.recordGuess(g, sha);
      if (recorded) {
        $('#guess_text').effect('highlight', {"color": "#aaffaa"}, 500);
      } else {
        $('#guess_text').effect('highlight', {"color": "#ffffaa"}, 500);
        word_bit.effect('pulsate', {"times":1}, 250);
      }
      View.updateScore(GameState.score());
      if (GameState.isDone()) {
        View.winner();
      }
    } else {
      View.incrementFails();
      $('#guess_text').stop(true, true);
      $('#guess_text').effect('highlight', { "color": "#ffaaaa" }, 500);
    }
  }

  $('#guess_text').keypress(function (e) {
    var press = String.fromCharCode(e.which);
    $('.not-pressed.value-' + press + ':first').addClass('pressed');
    $('.not-pressed.value-' + press + ':first').removeClass('not-pressed');
    return;
  });

  function countChar(word, chr) {
    return $.map(word, function (n,i) { if (n == chr) return n; else return null; });
  }

  // Trapping backspace only here, doesn't get thrown up as a keypress
  $('#guess_text').keydown(function (e) {
    if (e.which == "8") {
      var f = $("#guess_text").val();
      var ch = f[f.length -1];
      if (countChar(f, ch) <= countChar(GameState.letters, ch)) {
        $('.pressed.value-' + ch + ':first').addClass('not-pressed');
        $('.pressed.value-' + ch + ':first').removeClass('pressed');
      }
    }
  });

  $('#guess').submit(function() {
    try {
      var guess = $('#guess_text').val().toLowerCase();
      checkGuess(guess);
      View.resetInput();
    } catch(e) {
      console.error(e);
    }
    return false;
  });

  $('#party-time button').click(function () {
    window.location.hash = "";
    requestPuzzle();
  });

  function hidden(size) { 
    var word = "";
    for (var i = 0; i < size; i++) {
      word += "*";
    }
    return word;
  }

  function receivePuzzle(puzzle) {
    GameState.setPuzzle(puzzle);
    View.updateScore(GameState.score());
    View.displayPuzzle(GameState.puzzleId, GameState.letters, GameState.children);
  }

  function requestPuzzle(id) {
    var pid = (id == undefined) ? "next" : id; 
    $.get("/puzzles/" + pid, {}, receivePuzzle, "json");
  }

  $(function () {
    var puzzleId = (window.location.hash != "") ? window.location.hash.substring(1) : undefined;
    requestPuzzle(puzzleId);
  });

